## server.R
## author: Francisco Jose Diego Acosta


server <- function(input, output, session) {
  
  
  # AUTHORIZATION -----------------------------------------------------------
  auth_out <- secure_server(
    check_credentials = check_credentials(
      db = normalizePath(cnf$deploy$database),
      passphrase =  cnf$deploy$passphrase
    ), timeout = 0,
    inputs_list = list(group = list(fun = "selectInput",
                                    args = list(choices = c("all", "restricted"),
                                                multiple = TRUE,
                                                selected = c("all", "restricted")
                                    )
    )
    )
  )
  
  
  # DATA --------------------------------------------------------------------
  there_is_data = F
  
  data <- reactive({
    users = reactiveValuesToList(auth_out)
    
    dt = last_filepath(cnf) %>% readRDS() %>% .[!is.na(school)] %>%
      unique() %>% filter_comment(comment = users$comment)
    
    there_is_data<<-T
    
    dt %>% .[]
    
  })
  
  
  
  
  
  # SCHOOLS -----------------------------------------------------------------
  
  selector_school <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      data() %>% .[['school']] %>% unique() %>% .[!is.na(.)] %>% sort() -> choices
      shiny::selectizeInput(inputId = 'school',
                            label = 'Centros',
                            choices = choices,
                            selected = sort(choices),
                            multiple = T)
    }else{
      div()
    }
    
  })
  
  output$selector_school <- renderUI({selector_school()})
  
  
  schools <- reactive({
    if ('school' %in% input){
      input$school
    }else{
      data() %>% .[['school']] %>% unique() %>% .[.>0]
    }
  })
  
  # COURSES -----------------------------------------------------------------
  
  selector_course <- reactive({
    data() %>% .[['course']] %>% unique() %>% .[!is.na(.)] %>% sort() -> choices
    shiny::selectizeInput(inputId = 'course',
                          label = 'Cursos',
                          choices = sort(choices),
                          selected = sort(choices),
                          multiple = T)
    
  })
  
  output$selector_course <- renderUI({selector_course()})
  
  observeEvent(eventExpr = there_is_data,
               handlerExpr = {
                 schoools_filter = schools()
                 data() %>% .[school %in% schoools_filter] %>%
                   .[['course']] %>% unique() -> choices
                 updateSelectizeInput(session = session,
                                      inputId = 'course',
                                      choices = sort(choices),
                                      selected = sort(choices)
                 )
               })
  
  # GROUP -------------------------------------------------------------------
  
  observeEvent(eventExpr = input$course,
               handlerExpr = {
                 schoools_filter = schools()
                 data() %>% .[school %in% schoools_filter] %>%
                   .[course %in% input$course] %>%
                   .[['group']] %>% unique() %>% sort() %>% .[!is.na(.)] -> choices
                 names(choices) <- LETTERS[choices]
                 updateSelectizeInput(session = session,
                                      inputId = 'group',
                                      choices = choices,
                                      selected = choices
                 )
               })
  
  # SECTIONS ----------------------------------------------------------------
  
  observeEvent(eventExpr = there_is_data,
               handlerExpr = {
                 data() %>% .[['section']] %>% unique() %>% .[!is.na(.)] %>% sort() -> choices
                 names(choices) <- stringr::str_to_title(choices)
                 updateSelectizeInput(session = session,
                                      inputId = 'section',
                                      choices = choices,
                                      selected = head(choices,1)
                 )
               })
  
  # VARIABLES ---------------------------------------------------------------
  observeEvent(eventExpr = input$section,
               handlerExpr = {
                 data() %>% .[section %in% input$section] %>%
                   .[['variable']] %>% unique() %>% .[!is.na(.)] -> choices
                 
                 names(choices) <- map_chr(choices, set_main_title)
                 sel =  choices[2]
                 if(is.na(sel)){
                   sel = head(choices, 1)
                 }
                 
                 updateSelectizeInput(session = session,
                                      inputId = 'variable',
                                      choices = choices,
                                      selected =sel
                 )
               })
  
  
  
  
  # PLOT --------------------------------------------------------------------
  
  
  reactive_plot_data <- reactive({ plot_data(df = data(),
                                             cnf = cnf,
                                             metric = input$variable,
                                             filter = filter(),
                                             compare = input$compare,
                                             facet = input$facet
  ) })
  
  reactive_plot <- reactive({
    reactive_plot_data() %>% plot_chart()
  })
  
  
  output$plot <- renderUI({reactive_plot() })
  output$plot_data <- renderDT({ reactive_plot_data()})
  
  
  # TITLES ------------------------------------------------------------------
  
  
  reactive_title_comp <- reactive({
    filter_comp = filter_diff(data(), filter(), input$compare)
    comp_external <- as.character(input$compare) %in% c('gender', 'is_repeater', 'is_popular')
    if(comp_external){
      HTML(title_comp('Comparaci칩n', as.character(input$compare), 'Seleccionado', 'Comparaci칩n'))
    }else{
      zero_filter = any(map_dbl(filter_comp, length) == 0)
      same_filter = all(map2_lgl(.x=filter_comp, .y=filter(),
                                 .f = function(x, y) all(x==y)))
      if(zero_filter | same_filter){
        div()
      }else{
        HTML(set_title(main='Comparaci칩n',
                       schools = c('Resto'),
                       courses = filter_comp$course,
                       groups = c('Todos')))
      }
    }
    
  })
  
  reavtive_main_title <- reactive({
    shiny::h1(set_main_title(input$variable))
  })
  
  reactive_title <- reactive({
    HTML(set_title(main='Seleccionado',
                   schools = schools(),
                   courses = input$course,
                   groups = LETTERS[as.integer(c(input$group))]
    ))
  })
  
  
  # subtitles
  reactive_title_facet_left <- reactive({
    if(input$facet %in% c('gender', 'is_repeater', 'is_popular')){
      HTML(paste0('<b>', title_side(input$facet, is_left = T), '</b>'))
    }else{
      div()
    }
  })
  
  reactive_title_facet_rigth <- reactive({
    if(input$facet %in% c('gender', 'is_repeater', 'is_popular')){
      HTML(paste0('<b>', title_side(input$facet, is_left = F), '</b>'))
    }else{
      div()
    }
  })
  
  
  output$title <- renderUI({reactive_title()})
  output$title_comp <- renderUI({reactive_title_comp()})
  output$main_title <- renderUI({reavtive_main_title()})
  output$subtitle_left <- renderUI({ reactive_title_facet_left() })
  output$subtitle_right <- renderUI({ reactive_title_facet_rigth() })
  
  
  
  # FILTER ------------------------------------------------------------------
  
  filter <- reactive({ list(variable = input$variable,
                            school = schools(),
                            course = input$course,
                            group = input$group
  )
  })
  
  
  
  
  
  
  
  
  
  
  
  # ADMIN UPLOAD DATA -------------------------------------------------------
  
  admin_upload_data_title <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      shiny::h1('Nueva Encuesta')
    }else{
      div()
    }
  })
  
  admin_upload_data_select <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      shiny::fileInput(inputId = 'input_file',
                       label = '',
                       buttonLabel = 'Agregar',
                       placeholder = '',
                       multiple = F)
      
    }else{
      div()
    }
  })
  
  admin_upload_data_name <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      shiny::textInput(inputId = 'update_data_name', label='', placeholder = 'Nombre')
    }else{
      div()
    }
  })
  
  admin_upload_data_process <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      shiny::actionButton('update_data', 'Cargar')
    }else{
      div()
    }
  })
  
  output$admin_upload_data_title <- renderUI({ admin_upload_data_title() })
  output$admin_upload_data_select <- renderUI({ admin_upload_data_select() })
  output$admin_upload_data_name <- renderUI({ admin_upload_data_name() })
  output$admin_upload_data_process <- renderUI({ admin_upload_data_process() })
  
  
  # update data
  observeEvent(input$update_data, {
    if (is.null(input$input_file)){
      showNotification('No file Updated', duration = 10, type='error')
    }else{
      res <<- tidy_unique_file_safe(input$input_file$datapath, input$update_data_name, cnf)
      if (!is.null(res$error)){
        showNotification(as.character(res$error), duration = 10, type='error')
      }else{
        showNotification('Nueva encuesta a침adida')
        cnf$tidy$output_path %>% lslatr() %>% .[['rn']] %>%
          basename() %>% gsub('.RDS$', '', .) -> choices
        updateSelectInput(
          session = session,
          inputId = 'admin_list_tidy_files',
          choices = choices,
          selected = choices
        )
        
        updateTextInput(session = session,
                        inputId = 'update_data_name',
                        placeholder = 'Nombre',
                        label = '', value = '')
        
        
      }
    }
  })
  
  # ADMIN FILES -------------------------------------------------------------
  
  
  # Files
  admin_files_title <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      shiny::h1('Encuestas')
    }else{
      div()
    }
  })
  admin_files_list <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      cnf$tidy$output_path %>% lslatr() %>% .[['rn']] %>%
        basename() %>% gsub('.RDS$', '', .) -> choices
      shiny::selectInput(
        inputId = 'admin_list_tidy_files',
        label = '',
        choices = choices,
        selected = choices,
        multiple = T
      )
    }else{
      div()
    }
  })
  
  admin_files_delete <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      shiny::actionButton(inputId = 'delete', label = 'Eliminar')
    }else{
      div()
    }
  })
  admin_files_delete_check <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      shiny::textInput(inputId = 'check', label = '', value = '', placeholder = 'Nombre del Dataset')
      
    }else{
      div()
    }
  })
  output$admin_files_title <- renderUI({ admin_files_title() })
  output$admin_files_list <- renderUI({ admin_files_list() })
  output$admin_files_delete <- renderUI({ admin_files_delete() })
  output$admin_files_delete_check <- renderUI({ admin_files_delete_check() })
  
  
  observeEvent(input$delete, {
    if (input$check != 'eliminar'){
      showNotification("Estas seguro? Es irreversible.  Escribe: 'eliminar'", duration = 10, type='error')
    }else{
      input$admin_list_tidy_files %>%
        paste0('.RDS') %>%
        file.path(cnf$tidy$output_path, .) %>%
        file.remove()
      showNotification('Encuestas eliminadas')
      cnf$tidy$output_path %>% lslatr() %>% .[['rn']] %>%
        basename() %>% gsub('.RDS$', '', .) -> choices
      updateSelectInput(
        session = session,
        inputId = 'admin_list_tidy_files',
        choices = choices,
        selected = choices
      )
      updateTextInput(session = session, inputId = 'check', value = '')
    }
  })
  
  # ADMIN DATASET -----------------------------------------------------------
  
  
  admin_dataset_title <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      shiny::h1('Datasets')
    }else{
      div()
    }
  })
  
  admin_dataset_create <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      shiny::actionButton(inputId = 'create', label = 'Procesar')
    }else{
      div()
    }
  })
  
  admin_dataset_list <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      admin_dataset_list_choices(cnf) -> choices
      shiny::selectInput(
        inputId = 'admin_dataset_list',
        label = '',
        choices = choices,
        selected = head(choices, 1),
        multiple = F
      )
    }else{
      div()
    }
  })
  
  
  admin_dataset_delete <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      shiny::actionButton(inputId = 'delete_dataset', label = 'Eliminar')
    }else{
      div()
    }
  })
  
  admin_dataset_update <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      shiny::actionButton(inputId = 'update_dataset', label = 'Actualizar')
    }else{
      div()
    }
  })
  
  admin_dataset_delete_check <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      shiny::textInput(inputId = 'dataset_check', label = '', value = '', placeholder = 'Seguro?')
      
    }else{
      div()
    }
  })
  
  
  admin_content_title <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      shiny::h1('Content')
    }else{
      div()
    }
  })
  
  
  admin_dataset_list_title <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      shiny::h3(paste0(as.character(input$admin_dataset_list)))
    }else{
      div()
    }
  })
  
  admin_dataset_content <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      
      input$admin_dataset_list %>%
        file.path(cnf$preprocess$output_path,. ) %>%
        paste0(., '.RDS') %>%
        readRDS() %>%
        as.data.table() %>%
        .[, c('school', 'course', 'group'), with=F] %>%
        unique() %>%
        .[!is.na(school)] %>%
        .[, group := factor(group, levels=1:length(LETTERS), labels = LETTERS)] %>%
        as.data.frame() %>%
        as.data.table()
    }else{
      data.table()
    }
  })
  
  output$admin_dataset_title <- renderUI({ admin_dataset_title() })
  output$admin_dataset_create <- renderUI({ admin_dataset_create() })
  output$admin_dataset_list <- renderUI({ admin_dataset_list() })
  
  output$admin_dataset_delete <- renderUI({admin_dataset_delete() })
  output$admin_dataset_update <- renderUI({ admin_dataset_update() })
  
  output$admin_dataset_delete_check <- renderUI({ admin_dataset_delete_check() })
  
  output$admin_dataset_content <- DT::renderDT({admin_dataset_content() })
  output$admin_dataset_list_title <- renderUI({ admin_dataset_list_title() })
  output$admin_content_title <- renderUI({ admin_content_title() })
  
  
  observeEvent(input$create, {
    if (input$check == ''){
      showNotification("Escribe un nombre para el nuevo dataset, si el nombre ya existe el dataset sera remplazado",
                       duration = 10, type='error')
    }else{
      input$admin_list_tidy_files %>%
        paste0('.RDS') %>%
        file.path(cnf$tidy$output_path, .) %>%
        preprocess_paths_safe(., input$check, cnf) -> res
      if(!is.null(res$error)){
        showNotification(as.character(res$error), duration = 10, type='error')
      }else{
        showNotification('Nuevo dataset a침adido')
        admin_dataset_list_choices(cnf) -> choices
        updateSelectInput(
          session = session,
          inputId = 'admin_dataset_list',
          choices = choices,
          selected = head(choices,1)
        )
        
        updateTextInput(session = session, inputId = 'check', value = '')
        
        
      }
      
    }
  }
  )
  
  observeEvent(input$delete_dataset, {
    if (input$dataset_check != 'eliminar'){
      showNotification("Estas seguro? Es irreversible.  Escribe: 'eliminar'", duration = 10, type='error')
    }else{
      filepath <- file.path(cnf$preprocess$output_path, paste0(input$admin_dataset_list, '.RDS'))
      filepath_selected = get_filepath(cnf)
      print(filepath)
      print(filepath_selected)
      if (filepath == filepath_selected){
        showNotification("No puedes eliminar el dataset actual", duration = 10, type='warning')
      }else{
        file.remove(filepath)
        showNotification('Dataset Eliminado')
        admin_dataset_list_choices(cnf) -> choices
        updateSelectInput(
          session = session,
          inputId = 'admin_dataset_list',
          choices = choices,
          selected = head(choices, 1)
        )
        updateTextInput(session = session, inputId = 'dataset_check', value = '', placeholder = 'Dataset Name')
      }
    }
  })
  
  # update
  observeEvent(input$update_dataset, {
    if (input$dataset_check != 'actualizar'){
      showNotification("Estas seguro? Escribe: 'actualizar'", duration = 10, type='error')
    }else{
      cnf$preprocess$output_path %>%
        file.path(paste0(input$admin_dataset_list, '.RDS')) %>%
        file_touch()
      updateTextInput(session = session, inputId = 'dataset_check', value = '')
      showNotification("Refresca para ver los resultados", duration = 10, type='warning')
    }
    
  }
  )
  
  
  # ADMIN SELECTED DATASET --------------------------------------------------
  
  
  selected_title <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      shiny::h1('Selected')
    }else{
      div()
    }
  })
  
  selected_dataset <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      
      lslatr(cnf$preprocess$output_path) %>%
        .[rn == last_file(cnf)] %>%
        .[, c('rn', 'mtime'), with=F] %>%
        .[, file := basename(rn) %>% map_chr(~strsplit(., '.RDS') %>% unlist %>% head(1))] %>%
        .[, c('file', 'mtime'), with=F] %>%
        .[, mtime := as.character(mtime)] %>%
        as.vector() %>% paste0( collapse = '<br/>') %>%
        trimws() %>% HTML()
    }else{
      div()
    }
  })
  
  
  
  
  
  output$selected_title <- renderUI({selected_title()})
  output$selected_dataset <- renderUI({ selected_dataset() })
  
  
  # DOWNLOAD ----------------------------------------------------------------
  
  
  data_download <- reactive({
    input$admin_dataset_list %>%
      paste0('.RDS') %>%
      file.path(cnf$preprocess$output_path, .) %>%
      readRDS() %>%
      .[!is.na(school)] %>%
      
      .[, dataset := as.character(input$admin_dataset_list)] %>%
      .[, group := factor(group, 1:length(LETTERS), LETTERS)] %>%
      .[, label_int := y] %>%
      .[, label := factor(label_int, c(0,1,2,3), c('Bajo', 'Medio', 'Alto', 'Muy Alto'))] %>%
      .[, c('dataset', 'school', 'course', 'group', 'uid', 'is_left_handed',
            'is_popular', 'is_repeater', 'section', 'variable', 'label_int', 'label'),
        with=F] %>%
      unique() %>%
      .[]
  })
  
  
  
  set_filename <- reactive({
    file = input$admin_dataset_list
    lslatr(cnf$preprocess$output_path) %>%
      .[rn == file.path(cnf$preprocess$output_path, paste0(file, '.RDS'))] %>%
      .[, mtime] %>%
      as.character() %>%
      gsub(' ','_', .) %>%
      gsub(':|-','', .) %>%
      paste(file, ., sep= '__') %>%
      paste0(., '.xlsx')
    
  })
  
  
  download_data_ui <- reactive({
    auth_out_list = reactiveValuesToList(auth_out)
    if(as.logical(auth_out_list$admin)){
      downloadLink("download_data", "Download")
    }else{
      div()
    }
  })
  
  output$download_data_ui <- renderUI({download_data_ui()})
  
  
  output$download_data <- downloadHandler(
    filename = function() {
      set_filename()
    },
    content = function(file) {
      openxlsx::write.xlsx(data_download(), file)
      
    }
  )
}